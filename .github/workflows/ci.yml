name: studiographene-ci
on:
  workflow_call:
    inputs:
      # project_name is not used in the workflow, kept for backwards compatibility.
      project_name:
        type: string
        default: "sg-ci"
      excluded_jobs:
        type: string
        default: ""
      package_manager:
        type: string
        default: "npm"
      npm_token:
        type: string
        default: ""
      build_command:
        type: string
        default: "npm run build"
      docker_build_command:
        type: string
        default: "docker build -t local:latest ."
      docker_build_image_id:
        description: "Docker image ID as mentioned in docker_build_command"
        type: string
        default: "local:latest"
      CONTAINER_SCANNERS:
        description: "comma-separated list of what security issues to detect (vuln,secret,config). Default = vuln"
        type: string
        required: false
        default: vuln
      CONTAINER_SCAN_SKIP_DIRS:
        description: "Comma separated list of directories to skip scanning"
        type: string
        required: false
      lint_command:
        type: string
        default: "npm run lint"
      allowedLicenses:
        type: string
        default: "allowed_licenses.txt"
      semgrep_options:
        type: string
        default: ""
      security_scan_before_step_command:
        type: string
        default: ""
      security_scan_after_step_command:
        type: string
        default: ""
      pr_agent_before_step_command:
        type: string
        default: ""
      pr_agent_after_step_command:
        type: string
        default: ""
      caching_before_step_command:
        type: string
        default: ""
      caching_after_step_command:
        type: string
        default: ""
      technology_based_scans_before_step_command:  
        type: string
        default: ""
      technology_based_scans_after_step_command:  
        type: string
        default: ""        

jobs:
  caching:
    name: Cache node modules
    runs-on: ubuntu-latest
    permissions: write-all
    container:
      image: public.ecr.aws/studiographene/ci:node-20-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.REF }}
      - name: before step
        if: ${{ inputs.caching_before_step_command != '' }}
        run: |
          ${{ inputs.caching_before_step_command}}
      - name: Install dependencies
        run: |
          ${{ inputs.package_manager }} install
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert lockfile version > 2 in case of npm
        if: inputs.package_manager == 'npm'
        run: |
          ${{ inputs.package_manager }} install --lockfile-version 2 --package-lock-only
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache npm modules
        uses: actions/cache@v3
        if: inputs.package_manager == 'npm'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.lock') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Cache yarn modules
        uses: actions/cache@v3
        if: inputs.package_manager == 'yarn'
        with:
          path: /usr/local/share/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache pnpm modules
        uses: actions/cache@v3
        if: inputs.package_manager == 'pnpm'
        with:
          path: /__w/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Upload package-lock
        uses: actions/upload-artifact@v2
        if: inputs.package_manager == 'npm'
        with:
          name: lockFile
          path: package-lock.json
      - name: Upload yarn-lock
        uses: actions/upload-artifact@v2
        if: inputs.package_manager == 'yarn'
        with:
          name: lockFile
          path: yarn.lock
      - name: Upload pnpm-lock
        uses: actions/upload-artifact@v2
        if: inputs.package_manager == 'pnpm'
        with:
          name: lockFile
          path: pnpm-lock.yaml
      - name: after step
        if: ${{ inputs.caching_after_step_command != '' }}
        run: |
          ${{ inputs.caching_after_step_command}}



  Security-scans:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: caching
    

    container:
      image: public.ecr.aws/studiographene/ci:node-20-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.REF }}

      - name: Security scans before step
        if: ${{ inputs.security_scan_before_step_command != '' }}
        run: |
          ${{ inputs.security_scan_before_step_command}}

      - name: SAST Scan
        if: ${{ always() && !contains(inputs.excluded_jobs, 'sast') && (github.actor != 'dependabot[bot]') }}
        
        id: generate_report
        run: |
          set +e
          semgrep scan --error --config  "p/default" --config /root/configs/semgrep/rules/eslint.v1.3.32.yml --sarif ${{ inputs.semgrep_options }} > semgrep.sarif 
          SEMGREP_EXIT_CODE=$?
          set -e
          csvData=$(node - << EOF
          const fs = require('fs');
          const sarifFile = fs.readFileSync("semgrep.sarif", 'utf8');
          const sarifData = JSON.parse(sarifFile);

          const tableData = [];

          for (const run of sarifData.runs) {
            for (const result of run.results) {
              let ruleId = result.ruleId.replaceAll(',',';');
              ruleId = ruleId.replaceAll('\n','');
              let message = result.message.text.replaceAll(',', ';');
              message = message.replaceAll('\n','');
              const severity = result.level;
              const location = result.locations[0].physicalLocation;
              const lineNumber = location.region.startLine;
              const fileName = location.artifactLocation.uri;
              // Add data to the tableData array
              tableData.push(ruleId + "|" + message +"|" + lineNumber + "|" + fileName);
            }
          }                  
          // Log the CSV data as a string
          const csvData = tableData.join('\n');
          console.log(csvData);
          EOF
          )

          # Append the CSV data to the output file
          echo 'generating report'
          echo 'report<<EOF' >> $GITHUB_OUTPUT
          echo "$csvData" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          exit $SEMGREP_EXIT_CODE

      - uses: mshick/add-pr-comment@v2
        if: always()
        with:
          message-id: sast-scan
          message: "### Semgrep Report \n
            Below are the issues found by semgrep: \n
            \n\nRule Id | Message | Line Number | File Name \n
            --- | --- | --- | --- \n
              ${{steps.generate_report.outputs.report}}\n\n
            "
      - name: Gitleaks scan
        if: ${{ always() && !contains(inputs.excluded_jobs, 'gitleaks') && (github.actor != 'dependabot[bot]') }} 
        uses: gitleaks/gitleaks-action@v1.6.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download LockFile Artifact
        if:  always()
        uses: actions/download-artifact@v2
        with:
          name: lockFile
          path: .
      - name:  Generate SBOM using CycloneDX
        if: always ()
        run: |
          cdxgen --no-recurse -o bom.xml -p
        env:
          FETCH_LICENSE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CDXGEN_DEBUG_MODE: debug

      - name: License Scan
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PROJECT_NAME: ${{ github.event.repository.name }}
          PROJECT_OWNER: ${{ github.repository_owner }}
        if: ${{ always() && !contains( inputs.excluded_jobs, 'licenseScan' ) && (github.actor != 'dependabot[bot]') }}
        run: |
          /root/executables/ci-utility check --sbom bom.xml --allowedLicences ${{ inputs.allowedLicenses }}          

      - name: Dependency Scan using Google OSV
        id: dependency_scan
        if: ${{ always() && !contains( inputs.excluded_jobs, 'dependency_scan' ) && (github.actor != 'dependabot[bot]') }}
        run: |
          set +e
          osv-scanner --format markdown --config=/root/configs/osv/config.toml --sbom=bom.xml > osv_report.md        
          OSV_EXIT_CODE=$?
          set -e          
          echo 'report<<EOF' >> $GITHUB_OUTPUT
          cat osv_report.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          exit $OSV_EXIT_CODE

      - name: Comment report
        if: always()
        uses: mshick/add-pr-comment@v2
        with:
          message-id: dependency_scan
          message: "## OSV Dependency Scan Report \n
                    ### The following vulnerabilities has been detected in the code. Please resolve these before merging the pull request. \n
                    \n\n${{ steps.dependency_scan.outputs.report }}\n\n
                    " 
      - name: Security scans after step
        if: ${{ inputs.security_scan_after_step_command != '' }}
        run: |
          ${{ inputs.security_scan_after_step_command }}                     


  Technology_based_scans:
      name: Scans based on technology
      runs-on: ubuntu-latest
      permissions: write-all
      needs: caching
      container:
        image: public.ecr.aws/studiographene/ci:node-20-alpine-v1.0.4
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            ref: ${{ github.REF }}
        - name: Technology based scans before step
          if: ${{ inputs.technology_based_scans_before_step_command != '' }}
          run: |
            ${{ inputs.technology_based_scans_before_step_command}}
        - name: Cache npm modules
          uses: actions/cache@v3
          if: inputs.package_manager == 'npm'
          with:
            path: ~/.npm
            key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.lock') }}
            restore-keys: |
              ${{ runner.os }}-npm-
        - name: Cache yarn modules
          uses: actions/cache@v3
          if: inputs.package_manager == 'yarn'
          with:
            path: /usr/local/share/.cache/yarn
            key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            restore-keys: |
              ${{ runner.os }}-yarn-
        - name: Cache pnpm modules
          uses: actions/cache@v3
          if: inputs.package_manager == 'pnpm'
          with:
            path: /__w/.pnpm-store
            key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
            restore-keys: |
              ${{ runner.os }}-pnpm-
        - name: Install dependencies
          run: |
            ${{ inputs.package_manager }} install
          env:
            NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: Eslint scan
          if: ${{ always() && !contains( inputs.excluded_jobs, 'lint' ) && (github.actor != 'dependabot[bot]') }}
          run: |
            ${{ inputs.lint_command }}
        - name: Docker Build
          if: ${{ always() && !contains( inputs.excluded_jobs, 'docker' ) && (github.actor != 'dependabot[bot]') }}
          run: |
            ${{ inputs.docker_build_command }}
          env:
            NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: Creating Trivy report PR comment template file
          run: |
            cat <<EOF >> prcomment.tpl 
            | Package | Vulnerability | Severity | Status | Installed Version | Fixed Version | Title | \n
            | ------- | ------------- | -------- | ------ | ----------------- | ------------- | ----- |
            {{- range .}}
            {{- range .Vulnerabilities}}
            \n | {{ .PkgName | html }} | {{ .VulnerabilityID | html }} | {{ .Severity | html }} | {{ .Status | html }} | {{ .InstalledVersion | html }} | {{ .FixedVersion | html }} | {{ .Title | html }} |
            {{ end }}
            {{- end }}
            EOF
        - name: Trivy container vulnerability scan
          id: container_scan
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ${{ inputs.docker_build_image_id }}
            format: "template"
            template: "@prcomment.tpl"
            output: "trivyreport.json"
            exit-code: "1"
            ignore-unfixed: true
            vuln-type: "os,library"
            severity: "CRITICAL,HIGH"
            scanners: ${{ inputs.CONTAINER_SCANNERS }}
            skip-dirs: ${{ inputs.CONTAINER_SCAN_SKIP_DIRS }}
        - name: Report vulnerabilities in PR
          if: failure() && steps.container_scan.outcome == 'failure'
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: bash
          run: |
            echo -n "{\"body\":\"### Vulnerabilities detected\nThe following vulnerabilities of HIGH or CRITICAL severity has been detected in the code. Please resolve these before merging the pull request.\n\n" > result.json
            cat trivyreport.json >> result.json
            echo "\"}" >> result.json
            curl -X POST -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              ${{ github.event.pull_request.comments_url }} \
              -d @result.json
        - name: Report no vulnerabilities in PR
          if: success() && steps.container_scan.outcome == 'success'
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: bash
          run: |
            echo -n "{\"body\":\"### No vulnerabilities detected\nNo vulnerabilities of HIGH or CRITICAL severity has been detected in the code.\"}" > result.json
            curl -X POST -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              ${{ github.event.pull_request.comments_url }} \
              -d @result.json
        - name: Build project
          if: ${{always() && !contains( inputs.excluded_jobs, 'build' ) && (github.actor != 'dependabot[bot]') }}
          run: |
            ${{ inputs.build_command }}
        - name: Technology based scans after step
          if: ${{ inputs.technology_based_scans_after_step_command != '' }}
          run: |
            ${{ inputs.technology_based_scans_after_step_command}}
          

  pr_agent:
    name: Codium PR Agent Scan
    if: ${{ !contains( inputs.excluded_jobs, 'pr_agent' ) && (github.actor != 'dependabot[bot]') }}
    runs-on: ubuntu-latest
    steps:
      - name: before step
        if: ${{ inputs.pr_agent_before_step_command != '' }}
        run: |
          ${{ inputs.pr_agent_before_step_command}}
      - name: PR Agent action step
        id: pragent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: after step
        if: ${{ inputs.pr_agent_after_step_command != '' }}
        run: |
          ${{ inputs.pr_agent_after_step_command}}